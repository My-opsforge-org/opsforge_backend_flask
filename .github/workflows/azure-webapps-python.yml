name: Deploy Flask app to Azure VM

on:
  push:
    branches:
      - master
  workflow_dispatch:
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Drop all tables in the database
        run: |
          python init_db.py
        env:
          FLASK_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Delete migrations directory
        run: |
          rm -rf migrations

      - name: Initialize DB migrations
        run: |
          export FLASK_APP=manage.py && flask db init || true
        env:
          FLASK_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          

      - name: Generate migration
        run: |
          export FLASK_APP=manage.py && flask db migrate -m "Auto migration" || true
        env:
          FLASK_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Apply DB migrations
        run: |
          export FLASK_APP=manage.py && flask db upgrade
        env:
          FLASK_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Clean app directory on VM
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "\
            rm -rf /home/${{ secrets.VM_USERNAME }}/app && \
            mkdir -p /home/${{ secrets.VM_USERNAME }}/app \
          "
      - name: Copy code to VM
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} scp -o StrictHostKeyChecking=no -r . ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }}:/home/${{ secrets.VM_USERNAME }}/app
      - name: Install dependencies on VM
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "\
            cd /home/${{ secrets.VM_USERNAME }}/app && \
            sudo apt update && sudo apt install python3 python3-pip python3-venv -y && \
            python3 -m venv venv && \
            source venv/bin/activate && \
            pip install --upgrade pip && \
            pip install -r requirements.txt \
          "
      - name: Set Environment Variables
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "cd /home/${{ secrets.VM_USERNAME }}/app && echo 'export DATABASE_URL=\"postgresql://postgres:admin@gotrip-postgres.postgres.database.azure.com:5432/gotripdb\"' > .env && echo 'export JWT_SECRET_KEY=\"aftabs_jwt_secret_key\"' >> .env && echo 'export SECRET_KEY=\"aftabs_secret_key\"' >> .env && echo 'export GOOGLE_PLACES_API_KEY=\"AIzaSyDMOv3ucij8PQPtVLPvFZ88arhaRfl0lEA\"' >> .env && echo '=== Environment file created ===' && cat .env"

      - name: Create Gunicorn Config File
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "cd /home/${{ secrets.VM_USERNAME }}/app && echo 'bind = \"0.0.0.0:8000\"' > gunicorn.conf.py && echo 'workers = 4' >> gunicorn.conf.py && echo 'worker_class = \"sync\"' >> gunicorn.conf.py && echo 'timeout = 30' >> gunicorn.conf.py && echo 'chdir = \"/home/${{ secrets.VM_USERNAME }}/app\"' >> gunicorn.conf.py && echo 'Config file created successfully'"

      - name: Deploy and Start App
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "cd /home/${{ secrets.VM_USERNAME }}/app && source venv/bin/activate && source .env && pkill -f gunicorn || true && sleep 2 && nohup gunicorn -w 4 -b 0.0.0.0:8000 manage:app --chdir /home/${{ secrets.VM_USERNAME }}/app --log-level info > gunicorn.log 2>&1 & echo 'Gunicorn started with PID:' \$!"

      - name: Debug - Check if app can be imported
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "cd /home/${{ secrets.VM_USERNAME }}/app && source venv/bin/activate && source .env && python -c 'from manage import app; print(\"App imported successfully\")'"

      - name: Debug - Check for gunicorn config file
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "cd /home/${{ secrets.VM_USERNAME }}/app && ls -la gunicorn.conf.py || echo 'No gunicorn.conf.py found'"

      - name: Debug - Check gunicorn config file content
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "cd /home/${{ secrets.VM_USERNAME }}/app && cat gunicorn.conf.py || echo 'Config file not found or empty'"

      - name: Debug - Check port 8000 availability
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "ss -tlnp | grep :8000 || echo 'Port 8000 is available'"

      - name: Debug - Check system logs for gunicorn
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "journalctl -u gunicorn --no-pager -n 20 || echo 'No gunicorn systemd service found'"

      - name: Debug - Check gunicorn log file
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "cd /home/${{ secrets.VM_USERNAME }}/app && cat gunicorn.log || echo 'No gunicorn log file found'"

      - name: Debug - Check all processes immediately after startup
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "ps aux | grep gunicorn"

      - name: Debug - Test gunicorn in foreground to see errors
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "cd /home/${{ secrets.VM_USERNAME }}/app && source venv/bin/activate && source .env && timeout 5s gunicorn -w 1 -b 0.0.0.0:8001 manage:app --log-level debug || echo 'Foreground test completed'"

      - name: Check Gunicorn Processes
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "sleep 3 && ps aux | grep gunicorn | grep -v grep || echo 'No gunicorn processes found'"

      - name: Check Gunicorn Logs
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "ls -la gunicorn.log* || echo 'No gunicorn log files found'"

      - name: Check Port Status
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "ss -tlnp | grep :8000 || echo 'Port 8000 not listening'"

      - name: Verify Gunicorn is Running
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_PUBLIC_IP }} "if ps aux | grep gunicorn | grep -v grep > /dev/null; then echo '✅ Gunicorn is running successfully'; else echo '❌ Gunicorn failed to start'; exit 1; fi"
          
          
# Required secrets:
# VM_PUBLIC_IP: The public IP of your Azure VM (from Terraform output)
# VM_USERNAME: The admin username for your VM (e.g., azureuser)
# VM_PASSWORD: The admin password for your VM

# Note: Environment variables are hardcoded in the deployment command:
# - DATABASE_URL: postgresql://postgres:admin@gotrip-postgres.postgres.database.azure.com:5432/gotripdb
# - JWT_SECRET_KEY: aftabs_jwt_secret_key
# - SECRET_KEY: aftabs_secret_key
# - GOOGLE_PLACES_API_KEY: AIzaSyDMOv3ucij8PQPtVLPvFZ88arhaRfl0lEA

# Instructions:
# 1. Paste your actual publish profile XML in the publish-profile field above.
# 2. The app will use the values set by Terraform at runtime.
# 3. The workflow runs on push to main and can be triggered manually.